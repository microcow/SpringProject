<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds"> <!-- Logback 설정 파일을 주기적으로 스캔하여 변경 사항을 반영합니다. 여기서는 30초마다 스캔합니다. -->
   
   <!-- STDOUT : console 로그 설정 -->
   <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"> <!-- 콘솔로 로그를 출력하기 위한 ConsoleAppender를 정의합니다. 이름은 STDOUT입니다. -->
      <encoder>
         <pattern>%d{HH:mm:ss.SSS} %highlight([%-5level]) --- [%thread] %logger{35} : %msg %n</pattern> <!-- 로그 메시지의 출력 패턴을 정의합니다. %d{HH:mm:ss.SSS}는 로그 발생 시각, %highlight([%-5level])는 로그 레벨을 강조하여 표시, [%thread]는 쓰레드 이름, %logger{35}는 로그를 남긴 로거 이름, %msg는 로그 메시지 -->
      </encoder>
   </appender> 
   
   <!-- FILE : 로그 파일로 남기는 설정 -->
   <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"> <!-- 로그를 파일로 출력하기 위한 RollingFileAppender를 정의합니다. 이름은 FILE입니다. -->
      <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> <!-- 로그 파일을 시간 단위로 롤링하는 정책을 정의합니다. -->
         <fileNamePattern>C:\sts-logs\logback-%d{yyyy-MM-dd}.log.zip</fileNamePattern> <!-- 로그 파일의 이름 패턴을 정의합니다. 매일 새로운 파일이 생성되며, 파일은 ZIP 형식으로 압축됩니다. -->
         <maxHistory>7</maxHistory> 
      </rollingPolicy>
      <encoder>
         <pattern>%d{HH:mm:ss.SSS} %-5level --- [%thread] %logger{35} : %msg %n</pattern>
      </encoder>
   </appender>
<!-- 설정한 로그 등록  -->

   <!-- mapper 패키지  -->
   <logger name="com.example.demo.mapper" level="TRACE" additivity="false">
      <appender-ref ref="FILE" />
      <appender-ref ref="STDOUT" />
   </logger>
   <!-- additivity="false": 이 설정이 false로 되어 있으면, 이 로거가 상위 로거로 로그 메시지를 전파하지 않습니다. 즉, 이 로거에 의해 처리된 로그 메시지는 상위 로거(부모 로거)에 의해 다시 처리되지 않습니다. -->
   <!-- mapper패키지의 로깅 수준을 TRACE(가장낮음)로 설정한다. -->
   
   
   <logger name="com.example.demo" level="DEBUG" additivity="false">
      <appender-ref ref="FILE" />
      <appender-ref ref="STDOUT" />
   </logger>
      <!-- com.example.demo.controller 패키지에서 로깅 레벨을 설정하지 않았음에도 로그메시지를 출력할 수 있는 이유 : 
      지금 주어진 설정에서 com.example.demo.controller 패키지의 로깅 레벨이 명시적으로 설정되지 않았지만, 상위 패키지인 com.example.demo의 로깅 레벨은 DEBUG로 설정되어 있습니다. 따라서 additivity의 기본값이 true이기 때문에
       com.example.demo.controller 패키지에서 발생한 로그 메시지는 상위 패키지인 com.example.demo의 로거 설정을 따릅니다.
       즉, com.example.demo.controller 패키지에서 로깅 레벨을 명시적으로 설정하지 않았더라도, com.example.demo 패키지의 로깅 레벨 설정을 상속받아 DEBUG 레벨의 로그 메시지를 출력할 수 있습니다. -->
   
   
    <logger name="org.springframework.web" level="WARN" additivity="false">
      <appender-ref ref="FILE" />
      <appender-ref ref="STDOUT" />
   </logger>
   
   <root level="WARN">
      <appender-ref ref="FILE" />
      <appender-ref ref="STDOUT" />
   </root>
<!-- //설정한 로그 등록  -->
</configuration>